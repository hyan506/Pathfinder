{"version":3,"sources":["Pathfinder/GridMap/GridMap.module.css","Pathfinder/Node/Node.js","Pathfinder/GridMap/GridMap.js","algorithms/dijkstra.js","algorithms/astar.js","NavBar/NavBar.jsx","Pathfinder/Pathfinder.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Node","props","col","onMouseDown","onMouseEnter","onMouseUp","onMouseLeave","row","type","id","className","gridMap","classes","mapMouseDown","mapMouseUp","grid","map","rowIdx","key","nodeRow","node","nodeIdx","toggled","nodeMouseDown","nodeMouseEnter","nodeMouseUp","nodeMouseLeave","dijkstra","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","isVisited","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","cameFrom","hCost","currentNode","Math","sqrt","pow","findCurrentNode","visitedNodes","fScore","shortest","infinityScoreGrid","scores","scoreRow","i","initializeCameFrom","cameFromRow","NavBar","useState","algoName","setAlgoName","Fragment","onClick","clear","disabled","exe","Pathfinder","resetGird","state","rows","cols","document","getElementById","getInitialGrid","setState","handleMapMouseDown","mouseIsPressed","handleMapMouseUp","handleNodeMouseDown","setWall","handleNodeMouseEnter","c","count","handleNodeMouseLeave","UntoggledNode","handleNodeMouseUp","visualize","algo","nodesInShortestPathOrder","gScore","splice","indexOf","n","tentative_gScore","astar","unshift","reconstructPathAstar","reconstructPathDijkstra","animateAlgo","h","windowSize","height","w","width","nRows","floor","nCols","this","setTimeout","animateShortestPath","GridMap","Component","nRow","nCol","currentRow","createNode","isWall","slice","App","size","isClient","window","getSize","useCallback","innerWidth","undefined","innerHeight","setWindowSize","useEffect","handleResize","addEventListener","removeEventListener","useWindowSize","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+IACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,QAAU,2B,iQC2BhDC,G,YAxBF,SAAAC,GAAU,IAEnBC,EAOED,EAPFC,IACAC,EAMEF,EANFE,YACAC,EAKEH,EALFG,aACAC,EAIEJ,EAJFI,UACAC,EAGEL,EAHFK,aACAC,EAEEN,EAFFM,IACAC,EACEP,EADFO,KAGF,OACE,wBACEC,GAAE,eAAUF,EAAV,YAAiBL,GACnBQ,UAAS,eAAUF,GACnBL,YAAa,kBAAMA,EAAYI,EAAKL,IACpCE,aAAc,kBAAMA,EAAaG,EAAKL,IACtCG,UAAW,kBAAMA,EAAUE,EAAKL,IAChCI,aAAc,kBAAMA,EAAaC,EAAKL,Q,gBCc7BS,EAjCC,SAAAV,GACd,OACE,2BAAOS,UAAWE,IAAQD,QACxBR,YAAaF,EAAMY,aACnBR,UAAWJ,EAAMa,YACjB,+BACGb,EAAMc,KAAKC,KAAI,SAACT,EAAKU,GACpB,OACE,wBAAIC,IAAKD,EAAQP,UAAWE,IAAQO,SACjCZ,EAAIS,KAAI,SAACI,EAAMC,GAAa,IACnBd,EAA4Ba,EAA5Bb,IAAKL,EAAuBkB,EAAvBlB,IAAKM,EAAkBY,EAAlBZ,KAAMc,EAAYF,EAAZE,QACxB,OACE,kBAAC,EAAD,CACEJ,IAAKG,EACLb,KAAMA,EACNN,IAAKA,EACLoB,QAASA,EACTf,IAAKA,EACLJ,YAAa,SAACI,EAAKL,GAAN,OAAcD,EAAMsB,cAAchB,EAAKL,IACpDE,aAAc,SAACG,EAAKL,GAAN,OAAcD,EAAMuB,eAAejB,EAAKL,IACtDG,UAAW,SAACE,EAAKL,GAAN,OAAcD,EAAMwB,YAAYlB,EAAKL,IAChDI,aAAc,SAACC,EAAKL,GAAN,OAAcD,EAAMyB,eAAenB,EAAKL,gB,OCpB7DyB,EAAW,SAACZ,EAAMa,EAAWC,GACxC,IAAMC,EAAsB,GAC5BF,EAAUG,SAAW,EAErB,IADA,IAAMC,EAuCR,SAAqBjB,GACnB,IADyB,EACnBkB,EAAQ,GADW,cAEPlB,GAFO,IAEzB,2BAAwB,CAAC,IAAD,EAAbR,EAAa,sBACHA,GADG,IACtB,2BAAwB,CAAC,IAAda,EAAa,QACtBa,EAAMC,KAAKd,IAFS,gCAFC,8BAOzB,OAAOa,EA9CgBE,CAAYpB,GAC1BiB,EAAeI,QAAQ,CAC9BC,EAAoBL,GACpB,IAAMM,EAAcN,EAAeO,QAEnC,GAAyB,cAArBD,EAAY9B,KAAhB,CAGA,GAAI8B,EAAYP,WAAaS,IAAU,OAAOV,EAI9C,GAHAQ,EAAYG,WAAY,EACxBX,EAAoBI,KAAKI,GAErBA,IAAgBT,EAAY,OAAOC,EACvCY,EAAyBJ,EAAavB,MAI1C,SAASsB,EAAoBL,GAC3BA,EAAeW,MAAK,SAACC,EAAOC,GAAR,OAAkBD,EAAMb,SAAWc,EAAMd,YAG/D,SAASW,EAAyBtB,EAAML,GACtC,IAD4C,EACtC+B,EAOR,SAA+B1B,EAAML,GACnC,IAAMgC,EAAY,GACV7C,EAAakB,EAAblB,IAAKK,EAAQa,EAARb,IACTA,EAAM,GAAGwC,EAAUb,KAAKnB,EAAKR,EAAM,GAAGL,IACtCK,EAAMQ,EAAKqB,OAAS,GAAGW,EAAUb,KAAKnB,EAAKR,EAAM,GAAGL,IACpDA,EAAM,GAAG6C,EAAUb,KAAKnB,EAAKR,GAAKL,EAAM,IACxCA,EAAMa,EAAK,GAAGqB,OAAS,GAAGW,EAAUb,KAAKnB,EAAKR,GAAKL,EAAM,IAC7D,OAAO6C,EAAUC,QAAO,SAAAC,GAAQ,OAAKA,EAASR,aAdnBS,CAAsB9B,EAAML,GADX,cAErB+B,GAFqB,IAE5C,2BAA2C,CAAC,IAAjCG,EAAgC,QACzCA,EAASlB,SAAWX,EAAKW,SAAW,EACpCkB,EAASE,aAAe/B,GAJkB,+BCvB9C,IAAIgC,EAAW,GA8CTC,EAAQ,SAACC,EAAazB,GAC1B,OAAO0B,KAAKC,KACVD,KAAKE,IAAIH,EAAY/C,IAAMsB,EAAWtB,IAAK,GAC3CgD,KAAKE,IAAIH,EAAYpD,IAAM2B,EAAW3B,IAAK,KAIzCwD,EAAkB,SAACC,EAAcC,GACrC,IAAIN,EAD4C,EAG5CO,EAAW,KAHiC,cAI7BF,GAJ6B,IAIhD,2BAAiC,CAAC,IAAvBvC,EAAsB,QAC3BwC,EAAOxC,EAAKb,KAAKa,EAAKlB,KAAO2D,IAC/BA,EAAWD,EAAOxC,EAAKb,KAAKa,EAAKlB,KACjCoD,EAAclC,IAP8B,8BAUhD,OAAOkC,GAGT,SAASJ,EAAsB9B,EAAML,GACnC,IAAMgC,EAAY,GACV7C,EAAakB,EAAblB,IAAKK,EAAQa,EAARb,IAKb,OAJIA,EAAM,GAAGwC,EAAUb,KAAKnB,EAAKR,EAAM,GAAGL,IACtCK,EAAMQ,EAAKqB,OAAS,GAAGW,EAAUb,KAAKnB,EAAKR,EAAM,GAAGL,IACpDA,EAAM,GAAG6C,EAAUb,KAAKnB,EAAKR,GAAKL,EAAM,IACxCA,EAAMa,EAAK,GAAGqB,OAAS,GAAGW,EAAUb,KAAKnB,EAAKR,GAAKL,EAAM,IACtD6C,EAGT,IAAMe,EAAoB,SAAA/C,GACxB,IADgC,EAC1BgD,EAAS,GADiB,cAEdhD,GAFc,IAEhC,2BAAwB,CAEtB,IAFuB,IAAdR,EAAa,QAChByD,EAAW,GACRC,EAAI,EAAGA,EAAI1D,EAAI6B,OAAQ6B,IAC9BD,EAAS9B,KAAK,QAEhB6B,EAAO7B,KAAK8B,IAPkB,8BAShC,OAAOD,GAGHG,EAAqB,SAAAnD,GAAS,IAAD,gBACfA,GADe,IACjC,2BAAwB,CAEtB,IAFuB,IAAdR,EAAa,QAChB4D,EAAc,GACXF,EAAI,EAAGA,EAAI1D,EAAI6B,OAAQ6B,IAC9BE,EAAYjC,KAAK,IAEnBkB,EAASlB,KAAKiC,IANiB,gC,UC3DpBC,EAhCA,SAAAnE,GAAU,IAAD,EACYoE,mBAAS,QADrB,mBACbC,EADa,KACHC,EADG,KAGpB,OACI,kBAAC,IAAMC,SAAP,KACI,yBAAK9D,UAAU,WACX,gEACA,6BACI,wBAAIA,UAAU,cACV,4BAAI,yBACAA,UAAS,UAAkB,WAAb4D,EAAwB,SAAW,IACjDG,QAAS,WAAQF,EAAY,YAF7B,WAGJ,4BAAI,yBACA7D,UAAS,UAAkB,aAAb4D,EAA0B,SAAW,IACnDG,QAAS,WAAQF,EAAY,cAF7B,eAKZ,6BACI,4BAAQE,QAAS,WAAQxE,EAAMyE,UAA/B,SACA,4BACIC,SAAuB,SAAbL,EACVG,QAAS,WAAQxE,EAAM2E,IAAIN,KACb,SAAbA,EAAsB,2BAAtB,aAAyDA,EAAzD,UChBJO,E,kDACnB,WAAY5E,GAAQ,IAAD,uBACjB,cAAMA,IA4BR6E,UAAY,WACV,IAAK,IAAIvE,EAAM,EAAGA,EAAM,EAAKwE,MAAMC,KAAMzE,IACvC,IAAK,IAAIL,EAAM,EAAGA,EAAM,EAAK6E,MAAME,KAAM/E,IACnCK,IAAQ,EAAKwE,MAAMnD,UAAUrB,KAAOL,IAAQ,EAAK6E,MAAMnD,UAAU1B,IACnEgF,SAASC,eAAT,eAAgC5E,EAAhC,YAAuCL,IAAOQ,UAC5C,kBACOH,IAAQ,EAAKwE,MAAMlD,WAAWtB,KAAOL,IAAQ,EAAK6E,MAAMlD,WAAW3B,IAC5EgF,SAASC,eAAT,eAAgC5E,EAAhC,YAAuCL,IAAOQ,UAC5C,mBAEFwE,SAASC,eAAT,eAAgC5E,EAAhC,YAAuCL,IAAOQ,UAAY,OAIhE,IAAMK,EAAOqE,EAAe,EAAKL,MAAMC,KAAM,EAAKD,MAAME,MACxD,EAAKI,SAAS,CAAEtE,UA5CC,EAiDnBuE,mBAAqB,WACnB,EAAKD,SAAS,CACZE,gBAAgB,KAnDD,EAuDnBC,iBAAmB,WACjB,EAAKH,SAAS,CACZE,gBAAgB,KAzDD,EA8DnBE,oBAAsB,SAAClF,EAAKL,GAK1BwF,EAAQ,EAAKX,MAAMhE,KAAMR,EAAKL,IAnEb,EAqEnByF,qBAAuB,SAACpF,EAAKL,GAC3B,GAAK,EAAK6E,MAAMQ,eAAhB,CAIAG,EAAQ,EAAKX,MAAMhE,KAAMR,EAAKL,GAC9B,IAAI0F,EAAI,EAAKb,MAAMc,MAAQ,EAC3B,EAAKR,SAAS,CAAEQ,MAAOD,MA5EN,EA8EnBE,qBAAuB,SAACvF,EAAKL,GAC3B,GAAK,EAAK6E,MAAMQ,eAAhB,CAIAQ,EAAc,EAAKhB,MAAMhE,KAAMR,EAAKL,GACpC,IAAI0F,EAAI,EAAKb,MAAMc,MAAQ,EAC3B,EAAKR,SAAS,CAAEQ,MAAOD,MArFN,EAuFnBI,kBAAoB,SAACzF,EAAKL,GAIxB6F,EAAc,EAAKhB,MAAMhE,KAAMR,EAAKL,IA3FnB,EAyHnB+F,UAAY,SAACC,GAAU,IAIjBpE,EACAqE,EAJIpF,EAAS,EAAKgE,MAAdhE,KACFa,EAAYb,EAAK,EAAKgE,MAAMnD,UAAUrB,KAAK,EAAKwE,MAAMnD,UAAU1B,KAChE2B,EAAad,EAAK,EAAKgE,MAAMlD,WAAWtB,KAAK,EAAKwE,MAAMlD,WAAW3B,KAG5D,WAATgG,GACFpE,EFlIe,SAACf,EAAMa,EAAWC,GACrC,IAAMC,EAAsB,GAExB6B,EAAe,GACnBA,EAAazB,KAAKN,GAElBsC,EAAmBnD,GAGnB,IAAIqF,EAAStC,EAAkB/C,GAC/BqF,EAAOxE,EAAUrB,KAAKqB,EAAU1B,KAAO,EAGvC,IAAI0D,EAASE,EAAkB/C,GAG/B,IAFA6C,EAAOhC,EAAUrB,KAAKqB,EAAU1B,KAAOmD,EAAMzB,EAAWC,GAEzB,IAAxB8B,EAAavB,QAAc,CAChC,IAAMkB,EAAcI,EAAgBC,EAAcC,GAClD,GAAIN,IAAgBzB,EAClB,OAAOC,EAET6B,EAAa0C,OAAO1C,EAAa2C,QAAQhD,GAAc,GACvD,IANgC,EAM1BL,EAAWC,EAAsBI,EAAavC,GANpB,cAOhBkC,GAPgB,IAOhC,2BAA0B,CAAC,IAAhBsD,EAAe,QACxB,GAAe,cAAXA,EAAE/F,KAAN,CAEA,IAAMgG,EACJJ,EAAO9C,EAAY/C,KAAK+C,EAAYpD,KAAO,EACzCsG,EAAmBJ,EAAOG,EAAEhG,KAAKgG,EAAErG,OAErCkD,EAASmD,EAAEhG,KAAKgG,EAAErG,KAAOoD,EACzB8C,EAAOG,EAAEhG,KAAKgG,EAAErG,KAAOsG,EACvB5C,EAAO2C,EAAEhG,KAAKgG,EAAErG,KAAOkG,EAAOG,EAAEhG,KAAKgG,EAAErG,KAAOmD,EAAMkD,EAAG1E,IACtB,IAA7B8B,EAAa2C,QAAQC,KACvB5C,EAAazB,KAAKqE,GAClBzE,EAAoBI,KAAKqE,GACzBA,EAAE9D,WAAY,MApBY,+BAyBlC,OAAOX,EEyFmB2E,CAAM1F,EAAMa,EAAWC,GAC7CsE,EFhCC,SAA8BtE,GAGnC,IAFA,IAAMsE,EAA2B,GAC7B7C,EAAczB,EACK,KAAhByB,GACL6C,EAAyBO,QAAQpD,GACjCA,EAAcF,EAASE,EAAY/C,KAAK+C,EAAYpD,KAEtD,OAAOiG,EEyBwBQ,CAAqB9E,IAC9B,aAATqE,IACTpE,EAAsBH,EAASZ,EAAMa,EAAWC,GAChDsE,EHnFC,SAAiCtE,GAGtC,IAFA,IAAMsE,EAA2B,GAC7B7C,EAAczB,EACK,OAAhByB,GACL6C,EAAyBO,QAAQpD,GACjCA,EAAcA,EAAYH,aAE5B,OAAOgD,EG4EwBS,CAAwB/E,IAGrD,EAAKgF,YAAY/E,EAAqBqE,IArItC,IAAMW,EAAI,EAAK7G,MAAM8G,WAAWC,OAC1BC,EAAI,EAAKhH,MAAM8G,WAAWG,MAC1BC,EAAQ5D,KAAK6D,OAAON,EAAI,KAAO,IAC/BO,EAAQ9D,KAAK6D,OAAOH,EAAI,KAAO,IALpB,OAMjB,EAAKlC,MAAQ,CACXC,KAAMmC,EACNlC,KAAMoC,EACNzF,UAAW,CACTrB,IAAKgD,KAAK6D,MAAMD,EAAQ,GACxBjH,IAAKqD,KAAK6D,MAAMC,EAAQ,IAE1BxF,WAAY,CACVtB,IAAKgD,KAAK6D,MAAMD,EAAQ,GACxBjH,IAA6B,EAAxBqD,KAAK6D,MAAMC,EAAQ,IAE1BtG,KAAM,GACNwE,gBAAgB,EAChBM,MAAO,GAnBQ,E,gEAyBjB,IAAM9E,EAAOqE,EAAekC,KAAKvC,MAAMC,KAAMsC,KAAKvC,MAAME,MACxDqC,KAAKjC,SAAS,CAAEtE,W,kCAsENe,EAAqBqE,GAC/B,IAD0D,IAAD,kBAChDlC,GACP,GAAIA,IAAMnC,EAAoBM,OAI5B,OAHAmF,YAAW,WACT,EAAKC,oBAAoBrB,KACxB,GAAKlC,GACF,CAAN,UAEFsD,YAAW,WACT,IAAMnG,EAAOU,EAAoBmC,GACjCiB,SAASC,eAAT,eAAgC/D,EAAKb,IAArC,YAA4Ca,EAAKlB,MAAOQ,UACtD,sBACD,GAAKuD,IAXDA,EAAI,EAAGA,GAAKnC,EAAoBM,OAAQ6B,IAAK,CAAC,IAAD,IAA7CA,GAA6C,qC,0CAcpCkC,GAClB,IAD6C,IAAD,WACnClC,GACPsD,YAAW,WACT,IAAMnG,EAAO+E,EAAyBlC,GACtCiB,SAASC,eAAT,eAAgC/D,EAAKb,IAArC,YAA4Ca,EAAKlB,MAAOQ,UACtD,4BACD,GAAKuD,IALDA,EAAI,EAAGA,EAAIkC,EAAyB/D,OAAQ6B,IAAM,EAAlDA,K,+BA0BD,IAAD,EAC0BqD,KAAKvC,MAA9BhE,EADD,EACCA,KAAMwE,EADP,EACOA,eAEd,OACE,8BACE,kBAAC,EAAD,CACEX,IAAK0C,KAAKrB,UACVvB,MAAO4C,KAAKxC,YAGd,kBAAC2C,EAAD,CACE1G,KAAMA,EACNwE,eAAgBA,EAChB1E,aAAcyG,KAAKhC,mBACnBxE,WAAYwG,KAAK9B,iBACjBjE,cAAe+F,KAAK7B,oBACpBjE,eAAgB8F,KAAK3B,qBACrBlE,YAAa6F,KAAKtB,kBAClBtE,eAAgB4F,KAAKxB,uBAEvB,oE,GA/JgC4B,aAsKlCtC,EAAiB,SAACuC,EAAMC,GAE5B,IADA,IAAM7G,EAAO,GACJR,EAAM,EAAGA,EAAMoH,EAAMpH,IAAO,CAEnC,IADA,IAAMsH,EAAa,GACV3H,EAAM,EAAGA,EAAM0H,EAAM1H,IAC5B2H,EAAW3F,KAAK4F,EAAW5H,EAAKK,EAAKoH,EAAMC,IAE7C7G,EAAKmB,KAAK2F,GAEZ,OAAO9G,GAGH+G,EAAa,SAAC5H,EAAKK,EAAKoH,EAAMC,GAGlC,MAAO,CACL1H,MACAK,MACAC,KALgBD,IAAQgD,KAAK6D,MAAMO,EAAO,IAAMzH,IAAQqD,KAAK6D,MAAMQ,EAAO,GAAM,aAC/ErH,IAAQgD,KAAK6D,MAAMO,EAAO,IAAMzH,IAA+B,EAAvBqD,KAAK6D,MAAMQ,EAAO,GAAU,cAAgB,GAKrF7F,SAAUS,IACVlB,SAAS,EACTyG,QAAQ,EACR5E,aAAc,OAmBZuC,EAAU,SAAC3E,EAAMR,EAAKL,GAC1B,IACMkB,EADUL,EAAKiH,QACAzH,GAAKL,GACtBkB,EAAKE,UAEQ,cADAF,EAAKZ,KAAO,GAE3BY,EAAKZ,KAAO,GACa,eAAdY,EAAKZ,MAAuC,gBAAdY,EAAKZ,OAC9CY,EAAKZ,KAAO,YACZY,EAAKF,MACLE,EAAKE,SAAU,KAIbyE,EAAgB,SAAChF,EAAMR,EAAKL,GAChBa,EAAKiH,QACAzH,GAAKL,GACrBoB,SAAU,GC1LF2G,MA3Cf,WACE,IAAMC,EASR,WACE,IAAMC,EAA6B,kBAAXC,OAElBC,EAAUC,uBACd,WACE,MAAO,CACLpB,MAAOiB,EAAWC,OAAOG,gBAAaC,EACtCxB,OAAQmB,EAAWC,OAAOK,iBAAcD,KAG5C,CAACL,IAVoB,EAea9D,mBAASgE,GAftB,mBAehBtB,EAfgB,KAeJ2B,EAfI,KA8BvB,OAbAC,qBAAU,WACR,IAAKR,EACH,OAAO,EAGT,SAASS,IACPF,EAAcL,KAIhB,OADAD,OAAOS,iBAAiB,SAAUD,GAC3B,kBAAMR,OAAOU,oBAAoB,SAAUF,MACjD,CAACP,EAASF,IAENpB,EAvCMgC,GACb,OACE,yBAAKrI,UAAU,OACb,kBAAC,EAAD,CAAYqG,WAAYmB,MCKVc,QACW,cAA7BZ,OAAOa,SAASC,UAEe,UAA7Bd,OAAOa,SAASC,UAEhBd,OAAOa,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASnE,SAASC,eAAe,SD6H3C,kBAAmBmE,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b9115f17.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"gridMap\":\"GridMap_gridMap__1N6V6\",\"nodeRow\":\"GridMap_nodeRow__30s_T\"};","import React from \"react\";\r\n\r\nimport \"./Node.css\";\r\n\r\nconst Node = props => {\r\n  const {\r\n    col,\r\n    onMouseDown,\r\n    onMouseEnter,\r\n    onMouseUp,\r\n    onMouseLeave,\r\n    row,\r\n    type\r\n  } = props;\r\n\r\n  return (\r\n    <td\r\n      id={`node-${row}-${col}`}\r\n      className={`node ${type}`}\r\n      onMouseDown={() => onMouseDown(row, col)}\r\n      onMouseEnter={() => onMouseEnter(row, col)}\r\n      onMouseUp={() => onMouseUp(row, col)}\r\n      onMouseLeave={() => onMouseLeave(row, col)}\r\n    ></td>\r\n  );\r\n\r\n}\r\n\r\nexport default Node;","import React from \"react\";\r\nimport Node from \"../Node/Node\";\r\nimport classes from \"./GridMap.module.css\";\r\nconst gridMap = props => {\r\n  return (\r\n    <table className={classes.gridMap}\r\n      onMouseDown={props.mapMouseDown}\r\n      onMouseUp={props.mapMouseUp}>\r\n      <tbody>\r\n        {props.grid.map((row, rowIdx) => {\r\n          return (\r\n            <tr key={rowIdx} className={classes.nodeRow}>\r\n              {row.map((node, nodeIdx) => {\r\n                const { row, col, type, toggled } = node;\r\n                return (\r\n                  <Node\r\n                    key={nodeIdx}\r\n                    type={type}\r\n                    col={col}\r\n                    toggled={toggled}\r\n                    row={row}\r\n                    onMouseDown={(row, col) => props.nodeMouseDown(row, col)}\r\n                    onMouseEnter={(row, col) => props.nodeMouseEnter(row, col)}\r\n                    onMouseUp={(row, col) => props.nodeMouseUp(row, col)}\r\n                    onMouseLeave={(row, col) => props.nodeMouseLeave(row, col)}\r\n                  ></Node>\r\n                );\r\n              })}\r\n            </tr>\r\n          );\r\n        })}\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\nexport default gridMap;\r\n","// Performs Dijkstra's algorithm; returns *all* nodes in the order\r\n// in which they were visited. Also makes nodes point back to their\r\n// previous node, effectively allowing us to compute the shortest path\r\n// by backtracking from the finish node.\r\nexport const dijkstra = (grid, startNode, finishNode) => {\r\n  const visitedNodesInOrder = [];\r\n  startNode.distance = 0;\r\n  const unvisitedNodes = getAllNodes(grid);\r\n  while (!!unvisitedNodes.length) {\r\n    sortNodesByDistance(unvisitedNodes);\r\n    const closestNode = unvisitedNodes.shift();\r\n    // If encounter a wall, skip it.\r\n    if (closestNode.type === \"node-wall\") continue;\r\n    // If the closest node is at a distance of infinity,\r\n    // must be trapped and should therefore stop.\r\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n    closestNode.isVisited = true;\r\n    visitedNodesInOrder.push(closestNode);\r\n    //If reaches the finishNode, return\r\n    if (closestNode === finishNode) return visitedNodesInOrder;\r\n    updateUnvisitedNeighbors(closestNode, grid);\r\n  }\r\n};\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    neighbor.distance = node.distance + 1;\r\n    neighbor.previousNode = node;\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  const { col, row } = node;\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n\r\n// Backtracks from the finishNode to find the shortest path.\r\n// Only works when called *after* the dijkstra method above.\r\nexport function reconstructPathDijkstra(finishNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n","// Performs Dijkstra's algorithm; returns *all* nodes in the order\r\n// in which they were visited. Also makes nodes point back to their\r\n// previous node, effectively allowing us to compute the shortest path\r\n// by backtracking from the finish node.\r\n\r\nlet cameFrom = [];\r\n\r\nexport const astar = (grid, startNode, finishNode) => {\r\n  const visitedNodesInOrder = [];\r\n  // Initially, only the start node is known.\r\n  let visitedNodes = [];\r\n  visitedNodes.push(startNode);\r\n  // For node n, cameFrom[n] is the node immediately preceding it on the cheapest path from start to n currently known.\r\n  initializeCameFrom(grid);\r\n\r\n  //the cost of the cheapest path from start to n currently known.\r\n  let gScore = infinityScoreGrid(grid);\r\n  gScore[startNode.row][startNode.col] = 0;\r\n\r\n  //fScore[n] := gScore[n] + h(n).\r\n  let fScore = infinityScoreGrid(grid);\r\n  fScore[startNode.row][startNode.col] = hCost(startNode, finishNode);\r\n\r\n  while (visitedNodes.length !== 0) {\r\n    const currentNode = findCurrentNode(visitedNodes, fScore);\r\n    if (currentNode === finishNode) {\r\n      return visitedNodesInOrder;\r\n    }\r\n    visitedNodes.splice(visitedNodes.indexOf(currentNode), 1);\r\n    const neighbor = getUnvisitedNeighbors(currentNode, grid);\r\n    for (const n of neighbor) {\r\n      if (n.type === \"node-wall\") continue;\r\n      // tentative_gScore is the distance from start to the neighbor through current\r\n      const tentative_gScore =\r\n        gScore[currentNode.row][currentNode.col] + 1;\r\n      if (tentative_gScore < gScore[n.row][n.col]) {\r\n        // This path to neighbor is better than any previous one. Record it!\r\n        cameFrom[n.row][n.col] = currentNode;\r\n        gScore[n.row][n.col] = tentative_gScore;\r\n        fScore[n.row][n.col] = gScore[n.row][n.col] + hCost(n, finishNode);\r\n        if (visitedNodes.indexOf(n) === -1) {\r\n          visitedNodes.push(n);\r\n          visitedNodesInOrder.push(n);\r\n          n.isVisited = true;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return visitedNodesInOrder;\r\n};\r\n\r\nconst hCost = (currentNode, finishNode) => {\r\n  return Math.sqrt(\r\n    Math.pow(currentNode.row - finishNode.row, 2) +\r\n    Math.pow(currentNode.col - finishNode.col, 2)\r\n  );\r\n};\r\n\r\nconst findCurrentNode = (visitedNodes, fScore) => {\r\n  let currentNode;\r\n\r\n  let shortest = 9999;\r\n  for (const node of visitedNodes) {\r\n    if (fScore[node.row][node.col] < shortest) {\r\n      shortest = fScore[node.row][node.col];\r\n      currentNode = node;\r\n    }\r\n  }\r\n  return currentNode;\r\n};\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  const { col, row } = node;\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  return neighbors;\r\n}\r\n\r\nconst infinityScoreGrid = grid => {\r\n  const scores = [];\r\n  for (const row of grid) {\r\n    const scoreRow = [];\r\n    for (let i = 0; i < row.length; i++) {\r\n      scoreRow.push(\"9999\");\r\n    }\r\n    scores.push(scoreRow);\r\n  }\r\n  return scores;\r\n};\r\n\r\nconst initializeCameFrom = grid => {\r\n  for (const row of grid) {\r\n    const cameFromRow = [];\r\n    for (let i = 0; i < row.length; i++) {\r\n      cameFromRow.push(\"\");\r\n    }\r\n    cameFrom.push(cameFromRow);\r\n  }\r\n  return;\r\n};\r\n\r\n// Backtracks from the finishNode to find the shortest path.\r\n// Only works when called *after* the a star method above.\r\nexport function reconstructPathAstar(finishNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== \"\") {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = cameFrom[currentNode.row][currentNode.col];\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n","import React, { useState } from 'react';\r\nimport './NavBar.css';\r\nconst NavBar = props => {\r\n    const [algoName, setAlgoName] = useState('none');\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"wrapper\">\r\n                <h1>Pathfinding Algorithm Visualizer</h1>\r\n                <nav>\r\n                    <ul className=\"nav__links\">\r\n                        <li><div\r\n                            className={`${algoName === \"A star\" ? \"active\" : \"\"}`}\r\n                            onClick={() => { setAlgoName(\"A star\") }}>A star</div></li>\r\n                        <li><div\r\n                            className={`${algoName === \"dijkstra\" ? \"active\" : \"\"}`}\r\n                            onClick={() => { setAlgoName(\"dijkstra\") }}>Dijkstra</div></li>\r\n                    </ul>\r\n                </nav>\r\n                <div>\r\n                    <button onClick={() => { props.clear() }}>Clear</button>\r\n                    <button\r\n                        disabled={algoName === \"none\"}\r\n                        onClick={() => { props.exe(algoName) }}>\r\n                        {algoName === \"none\" ? \"Please select algorithon\" : `Go ${algoName}!`}\r\n                    </button>\r\n                </div>\r\n            </div>\r\n\r\n        </React.Fragment>\r\n\r\n    );\r\n}\r\n\r\nexport default NavBar;","import React, { Component } from \"react\";\r\nimport \"./Pathfinder.css\";\r\nimport GridMap from \"./GridMap/GridMap\";\r\nimport \"../algorithms/dijkstra\";\r\nimport { dijkstra, reconstructPathDijkstra } from \"../algorithms/dijkstra\";\r\nimport { astar, reconstructPathAstar } from \"../algorithms/astar\";\r\nimport NavBar from \"../NavBar/NavBar\";\r\n\r\nexport default class Pathfinder extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const h = this.props.windowSize.height;\r\n    const w = this.props.windowSize.width;\r\n    const nRows = Math.floor((h - 140) / 25);\r\n    const nCols = Math.floor((w - 200) / 25);\r\n    this.state = {\r\n      rows: nRows,\r\n      cols: nCols,\r\n      startNode: {\r\n        row: Math.floor(nRows / 2),\r\n        col: Math.floor(nCols / 4),\r\n      },\r\n      finishNode: {\r\n        row: Math.floor(nRows / 2),\r\n        col: Math.floor(nCols / 4) * 3,\r\n      },\r\n      grid: [],\r\n      mouseIsPressed: false,\r\n      count: 0\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n\r\n    const grid = getInitialGrid(this.state.rows, this.state.cols);\r\n    this.setState({ grid });\r\n  }\r\n\r\n  resetGird = () => {\r\n    for (let row = 0; row < this.state.rows; row++) {\r\n      for (let col = 0; col < this.state.cols; col++) {\r\n        if (row === this.state.startNode.row && col === this.state.startNode.col) {\r\n          document.getElementById(`node-${row}-${col}`).className =\r\n            \"node node-start\";\r\n        } else if (row === this.state.finishNode.row && col === this.state.finishNode.col) {\r\n          document.getElementById(`node-${row}-${col}`).className =\r\n            \"node node-finish\";\r\n        } else {\r\n          document.getElementById(`node-${row}-${col}`).className = \"node\";\r\n        }\r\n      }\r\n    }\r\n    const grid = getInitialGrid(this.state.rows, this.state.cols);\r\n    this.setState({ grid });\r\n  };\r\n\r\n  //Mouse Event Handlers\r\n  //Map\r\n  handleMapMouseDown = () => {\r\n    this.setState({\r\n      mouseIsPressed: true\r\n    });\r\n  }\r\n\r\n  handleMapMouseUp = () => {\r\n    this.setState({\r\n      mouseIsPressed: false\r\n    });\r\n  }\r\n\r\n  //Node\r\n  handleNodeMouseDown = (row, col) => {\r\n    // const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n    // this.setState({\r\n    //   grid: newGrid,\r\n    // });\r\n    setWall(this.state.grid, row, col);\r\n  };\r\n  handleNodeMouseEnter = (row, col) => {\r\n    if (!this.state.mouseIsPressed) return;\r\n    // console.log(\"on!Enter\");\r\n    // const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n    // this.setState({ grid: newGrid });\r\n    setWall(this.state.grid, row, col);\r\n    var c = this.state.count + 1;\r\n    this.setState({ count: c })\r\n  };\r\n  handleNodeMouseLeave = (row, col) => {\r\n    if (!this.state.mouseIsPressed) return;\r\n    // console.log(\"on!Leave\");\r\n    // const newGrid = UntoggledNode(this.state.grid, row, col);\r\n    // this.setState({ grid: newGrid });\r\n    UntoggledNode(this.state.grid, row, col);\r\n    var c = this.state.count + 1;\r\n    this.setState({ count: c })\r\n  };\r\n  handleNodeMouseUp = (row, col) => {\r\n    // const newGrid = UntoggledNode(this.state.grid, row, col);\r\n    // this.setState({ grid: newGrid });\r\n    // console.log(\"off!\");\r\n    UntoggledNode(this.state.grid, row, col);\r\n  };\r\n\r\n\r\n  //Animation\r\n  animateAlgo(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestPathOrder);\r\n        }, 10 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node node-visited\";\r\n      }, 10 * i);\r\n    }\r\n  }\r\n  animateShortestPath(nodesInShortestPathOrder) {\r\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n      setTimeout(() => {\r\n        const node = nodesInShortestPathOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node node-shortest-path\";\r\n      }, 50 * i);\r\n    }\r\n  }\r\n\r\n  visualize = (algo) => {\r\n    const { grid } = this.state;\r\n    const startNode = grid[this.state.startNode.row][this.state.startNode.col];\r\n    const finishNode = grid[this.state.finishNode.row][this.state.finishNode.col];\r\n    let visitedNodesInOrder;\r\n    let nodesInShortestPathOrder;\r\n    if (algo === \"A star\") {\r\n      visitedNodesInOrder = astar(grid, startNode, finishNode);\r\n      nodesInShortestPathOrder = reconstructPathAstar(finishNode);\r\n    } else if (algo === \"dijkstra\") {\r\n      visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n      nodesInShortestPathOrder = reconstructPathDijkstra(finishNode);\r\n    }\r\n\r\n    this.animateAlgo(visitedNodesInOrder, nodesInShortestPathOrder);\r\n  };\r\n\r\n  render() {\r\n    const { grid, mouseIsPressed } = this.state;\r\n\r\n    return (\r\n      <main>\r\n        <NavBar\r\n          exe={this.visualize}\r\n          clear={this.resetGird}\r\n        />\r\n\r\n        <GridMap\r\n          grid={grid}\r\n          mouseIsPressed={mouseIsPressed}\r\n          mapMouseDown={this.handleMapMouseDown}\r\n          mapMouseUp={this.handleMapMouseUp}\r\n          nodeMouseDown={this.handleNodeMouseDown}\r\n          nodeMouseEnter={this.handleNodeMouseEnter}\r\n          nodeMouseUp={this.handleNodeMouseUp}\r\n          nodeMouseLeave={this.handleNodeMouseLeave}\r\n        />\r\n        <p>*Click on the map to add walls.*</p>\r\n      </main>\r\n    );\r\n  }\r\n}\r\n\r\n//Helpers\r\nconst getInitialGrid = (nRow, nCol) => {\r\n  const grid = [];\r\n  for (let row = 0; row < nRow; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < nCol; col++) {\r\n      currentRow.push(createNode(col, row, nRow, nCol));\r\n    }\r\n    grid.push(currentRow);\r\n  }\r\n  return grid;\r\n};\r\n\r\nconst createNode = (col, row, nRow, nCol) => {\r\n  const nodeType = (row === Math.floor(nRow / 2) && col === Math.floor(nCol / 4)) ? \"node-start\" :\r\n    (row === Math.floor(nRow / 2) && col === Math.floor(nCol / 4) * 3) ? \"node-finish\" : \"\";\r\n  return {\r\n    col,\r\n    row,\r\n    type: nodeType,\r\n    distance: Infinity,\r\n    toggled: false,\r\n    isWall: false,\r\n    previousNode: null\r\n  };\r\n};\r\n\r\n// const getNewGridWithWallToggled = (grid, row, col) => {\r\n//   const newGrid = grid.slice();\r\n//   const node = newGrid[row][col];\r\n//   if (node.toggled) return newGrid;\r\n//   const newNode = {\r\n//     ...node,\r\n//     type: node.type === \"node-wall\" ? \"\" :\r\n//       !(node.type === \"node-start\" || node.type === \"node-finish\") ? \"node-wall\" :\r\n//         node.type,\r\n//     toggled: true\r\n//   };\r\n//   newGrid[row][col] = newNode;\r\n//   return newGrid;\r\n// };\r\n\r\nconst setWall = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  if (node.toggled) return;\r\n  const nodeType = node.type + \"\";\r\n  if (nodeType === \"node-wall\") {\r\n    node.type = \"\";\r\n  } else if (!(node.type === \"node-start\" || node.type === \"node-finish\")) {\r\n    node.type = \"node-wall\";\r\n    node.key++;\r\n    node.toggled = true;\r\n  };\r\n}\r\n\r\nconst UntoggledNode = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  node.toggled = false;\r\n};","import React, { useState, useEffect, useCallback } from \"react\";\r\nimport \"./App.css\";\r\nimport Pathfinder from \"./Pathfinder/Pathfinder\";\r\nfunction App() {\r\n  const size = useWindowSize();\r\n  return (\r\n    <div className=\"App\">\r\n      <Pathfinder windowSize={size} />\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nfunction useWindowSize() {\r\n  const isClient = typeof window === 'object';\r\n\r\n  const getSize = useCallback(\r\n    () => {\r\n      return {\r\n        width: isClient ? window.innerWidth : undefined,\r\n        height: isClient ? window.innerHeight : undefined\r\n      };\r\n    },\r\n    [isClient],\r\n  );\r\n\r\n\r\n\r\n  const [windowSize, setWindowSize] = useState(getSize);\r\n\r\n  useEffect(() => {\r\n    if (!isClient) {\r\n      return false;\r\n    }\r\n\r\n    function handleResize() {\r\n      setWindowSize(getSize());\r\n    }\r\n\r\n    window.addEventListener('resize', handleResize);\r\n    return () => window.removeEventListener('resize', handleResize);\r\n  }, [getSize, isClient]); // Empty array ensures that effect is only run on mount and unmount\r\n\r\n  return windowSize;\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}