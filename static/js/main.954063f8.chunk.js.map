{"version":3,"sources":["Pathfinder/GridMap/GridMap.module.css","Pathfinder/Node/Node.js","Pathfinder/GridMap/GridMap.js","algorithms/dijkstra.js","algorithms/astar.js","NavBar/NavBar.jsx","Pathfinder/Pathfinder.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Node","props","col","onMouseDown","onMouseEnter","onMouseUp","onMouseLeave","row","type","id","className","gridMap","classes","mapMouseDown","mapMouseUp","grid","map","rowIdx","key","nodeRow","node","nodeIdx","toggled","nodeMouseDown","nodeMouseEnter","nodeMouseUp","nodeMouseLeave","cameFrom","distanceMap","dijkstra","startNode","finishNode","initializeCameFrom","initializeDistanceMap","visitedNodesInOrder","unvisitedNodes","nodes","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","isVisited","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","filter","neighbor","includes","getUnvisitedNeighbors","cameFromRow","i","distanceMapRow","hCost","currentNode","Math","sqrt","pow","findCurrentNode","visitedNodes","fScore","shortest","infinityScoreGrid","scores","scoreRow","NavBar","useState","algoName","setAlgoName","Fragment","onClick","clear","disabled","animating","clearWalls","exe","Pathfinder","resetGird","state","rows","cols","document","getElementById","getInitialGrid","setState","resetGirdButWall","ifClearWall","nodesRow","handleMapMouseDown","mouseIsPressed","handleMapMouseUp","handleNodeMouseDown","setWall","handleNodeMouseEnter","forceUpdate","handleNodeMouseLeave","UntoggledNode","handleNodeMouseUp","visualize","algo","nodesInShortestPathOrder","unshift","reconstructPathDijkstra","gScore","splice","indexOf","n","tentative_gScore","astar","reconstructPathAstar","animateAlgo","h","windowSize","height","w","width","nRows","floor","nCols","this","setTimeout","animateShortestPath","GridMap","Component","nRow","nCol","currentRow","createNode","isWall","previousNode","slice","App","size","isClient","window","getSize","useCallback","innerWidth","undefined","innerHeight","setWindowSize","useEffect","handleResize","addEventListener","removeEventListener","useWindowSize","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.954063f8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"gridMap\":\"GridMap_gridMap__1N6V6\",\"nodeRow\":\"GridMap_nodeRow__30s_T\"};","import React from \"react\";\r\n\r\nimport \"./Node.css\";\r\n\r\nconst Node = props => {\r\n  const {\r\n    col,\r\n    onMouseDown,\r\n    onMouseEnter,\r\n    onMouseUp,\r\n    onMouseLeave,\r\n    row,\r\n    type\r\n  } = props;\r\n\r\n  return (\r\n    <td\r\n      id={`node-${row}-${col}`}\r\n      className={`node ${type}`}\r\n      onMouseDown={() => onMouseDown(row, col)}\r\n      onMouseEnter={() => onMouseEnter(row, col)}\r\n      onMouseUp={() => onMouseUp(row, col)}\r\n      onMouseLeave={() => onMouseLeave(row, col)}\r\n    ></td>\r\n  );\r\n\r\n}\r\n\r\nexport default Node;","import React from \"react\";\r\nimport Node from \"../Node/Node\";\r\nimport classes from \"./GridMap.module.css\";\r\nconst gridMap = props => {\r\n  return (\r\n    <table className={classes.gridMap}\r\n      onMouseDown={props.mapMouseDown}\r\n      onMouseUp={props.mapMouseUp}>\r\n      <tbody>\r\n        {props.grid.map((row, rowIdx) => {\r\n          return (\r\n            <tr key={rowIdx} className={classes.nodeRow}>\r\n              {row.map((node, nodeIdx) => {\r\n                const { row, col, type, toggled } = node;\r\n                return (\r\n                  <Node\r\n                    key={nodeIdx}\r\n                    type={type}\r\n                    col={col}\r\n                    toggled={toggled}\r\n                    row={row}\r\n                    onMouseDown={(row, col) => props.nodeMouseDown(row, col)}\r\n                    onMouseEnter={(row, col) => props.nodeMouseEnter(row, col)}\r\n                    onMouseUp={(row, col) => props.nodeMouseUp(row, col)}\r\n                    onMouseLeave={(row, col) => props.nodeMouseLeave(row, col)}\r\n                  ></Node>\r\n                );\r\n              })}\r\n            </tr>\r\n          );\r\n        })}\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\nexport default gridMap;\r\n","// Performs Dijkstra's algorithm; returns *all* nodes in the order\r\n// in which they were visited. Also makes nodes point back to their\r\n// previous node, effectively allowing us to compute the shortest path\r\n// by backtracking from the finish node.\r\nlet cameFrom = [];\r\nlet distanceMap = [];\r\n\r\nexport const dijkstra = (grid, startNode, finishNode) => {\r\n  initializeCameFrom(grid);\r\n  initializeDistanceMap(grid);\r\n  const visitedNodesInOrder = [];\r\n  distanceMap[startNode.row][startNode.col] = 0;\r\n  const unvisitedNodes = getAllNodes(grid);\r\n  while (!!unvisitedNodes.length) {\r\n    sortNodesByDistance(unvisitedNodes);\r\n    const closestNode = unvisitedNodes.shift();\r\n    // If encounter a wall, skip it.\r\n    if (closestNode.type === \"node-wall\") continue;\r\n    // If the closest node is at a distance of infinity,\r\n    // must be trapped and should therefore stop.\r\n    if (distanceMap[closestNode.row][closestNode.col] === Infinity) {\r\n      return visitedNodesInOrder;\r\n    }\r\n    closestNode.isVisited = true;\r\n    visitedNodesInOrder.push(closestNode);\r\n    //If reaches the finishNode, return\r\n    if (closestNode === finishNode) return visitedNodesInOrder;\r\n    updateUnvisitedNeighbors(closestNode, grid, visitedNodesInOrder);\r\n  }\r\n};\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) =>\r\n    distanceMap[nodeA.row][nodeA.col] - distanceMap[nodeB.row][nodeB.col]);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid, visitedNodesInOrder) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid, visitedNodesInOrder);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    distanceMap[neighbor.row][neighbor.col] = distanceMap[node.row][node.col] + 1\r\n    cameFrom[neighbor.row][neighbor.col] = node;\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid, visitedNodesInOrder) {\r\n  const neighbors = [];\r\n  const { col, row } = node;\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  return neighbors.filter(neighbor => !visitedNodesInOrder.includes(neighbor));\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n\r\n// Backtracks from the finishNode to find the shortest path.\r\n// Only works when called *after* the dijkstra method above.\r\nexport function reconstructPathDijkstra(finishNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== \"\") {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = cameFrom[currentNode.row][currentNode.col];\r\n  }\r\n  cameFrom = [];\r\n  distanceMap = []\r\n  return nodesInShortestPathOrder;\r\n}\r\n\r\nconst initializeCameFrom = grid => {\r\n  for (const row of grid) {\r\n    const cameFromRow = [];\r\n    for (let i = 0; i < row.length; i++) {\r\n      cameFromRow.push(\"\");\r\n    }\r\n    cameFrom.push(cameFromRow);\r\n  }\r\n  return;\r\n};\r\n\r\nconst initializeDistanceMap = grid => {\r\n  for (const row of grid) {\r\n    const distanceMapRow = [];\r\n    for (let i = 0; i < row.length; i++) {\r\n      distanceMapRow.push(Infinity)\r\n    }\r\n    distanceMap.push(distanceMapRow);\r\n  }\r\n  return;\r\n};\r\n","let cameFrom = [];\r\n\r\nexport const astar = (grid, startNode, finishNode) => {\r\n  // console.log(grid[startNode.row][startNode.col]);\r\n  const visitedNodesInOrder = [];\r\n  // Initially, only the start node is known.\r\n  let visitedNodes = [];\r\n  visitedNodes.push(startNode);\r\n  // For node n, cameFrom[n] is the node immediately preceding it on the cheapest path from start to n currently known.\r\n  initializeCameFrom(grid);\r\n\r\n  //the cost of the cheapest path from start to n currently known.\r\n  let gScore = infinityScoreGrid(grid);\r\n  gScore[startNode.row][startNode.col] = 0;\r\n\r\n  //fScore[n] := gScore[n] + h(n).\r\n  let fScore = infinityScoreGrid(grid);\r\n  fScore[startNode.row][startNode.col] = hCost(startNode, finishNode);\r\n\r\n  while (visitedNodes.length !== 0) {\r\n    const currentNode = findCurrentNode(visitedNodes, fScore);\r\n    if (currentNode === finishNode) {\r\n      return visitedNodesInOrder;\r\n    }\r\n    visitedNodes.splice(visitedNodes.indexOf(currentNode), 1);\r\n    const neighbor = getUnvisitedNeighbors(currentNode, grid);\r\n    for (const n of neighbor) {\r\n      if (n.type === \"node-wall\") continue;\r\n      // tentative_gScore is the distance from start to the neighbor through current\r\n      const tentative_gScore =\r\n        gScore[currentNode.row][currentNode.col] + 1;\r\n      if (tentative_gScore < gScore[n.row][n.col]) {\r\n        // This path to neighbor is better than any previous one. Record it!\r\n        cameFrom[n.row][n.col] = currentNode;\r\n        gScore[n.row][n.col] = tentative_gScore;\r\n        fScore[n.row][n.col] = gScore[n.row][n.col] + hCost(n, finishNode);\r\n        if (visitedNodes.indexOf(n) === -1) {\r\n          visitedNodes.push(n);\r\n          visitedNodesInOrder.push(n);\r\n          n.isVisited = true;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return visitedNodesInOrder;\r\n};\r\n\r\nconst hCost = (currentNode, finishNode) => {\r\n  return Math.sqrt(\r\n    Math.pow(currentNode.row - finishNode.row, 2) +\r\n    Math.pow(currentNode.col - finishNode.col, 2)\r\n  );\r\n};\r\n\r\nconst findCurrentNode = (visitedNodes, fScore) => {\r\n  let currentNode;\r\n\r\n  let shortest = 9999;\r\n  for (const node of visitedNodes) {\r\n    if (fScore[node.row][node.col] < shortest) {\r\n      shortest = fScore[node.row][node.col];\r\n      currentNode = node;\r\n    }\r\n  }\r\n  return currentNode;\r\n};\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  const { col, row } = node;\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  return neighbors;\r\n}\r\n\r\nconst infinityScoreGrid = grid => {\r\n  const scores = [];\r\n  for (const row of grid) {\r\n    const scoreRow = [];\r\n    for (let i = 0; i < row.length; i++) {\r\n      scoreRow.push(\"9999\");\r\n    }\r\n    scores.push(scoreRow);\r\n  }\r\n  return scores;\r\n};\r\n\r\nconst initializeCameFrom = grid => {\r\n  for (const row of grid) {\r\n    const cameFromRow = [];\r\n    for (let i = 0; i < row.length; i++) {\r\n      cameFromRow.push(\"\");\r\n    }\r\n    cameFrom.push(cameFromRow);\r\n  }\r\n  return;\r\n};\r\n\r\n// Backtracks from the finishNode to find the shortest path.\r\n// Only works when called *after* the a star method above.\r\nexport function reconstructPathAstar(finishNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== \"\") {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = cameFrom[currentNode.row][currentNode.col];\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n","import React, { useState } from 'react';\r\nimport './NavBar.css';\r\nconst NavBar = props => {\r\n    const [algoName, setAlgoName] = useState('none');\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"wrapper\">\r\n                <h1>Pathfinding Algorithm Visualizer</h1>\r\n                <nav>\r\n                    <ul className=\"nav__links\">\r\n                        <li><div\r\n                            className={`${algoName === \"astar\" ? \"active\" : \"\"}`}\r\n                            onClick={() => { setAlgoName(\"astar\") }}>A star</div></li>\r\n                        <li><div\r\n                            className={`${algoName === \"dijkstra\" ? \"active\" : \"\"}`}\r\n                            onClick={() => {\r\n                                setAlgoName(\"dijkstra\");\r\n                                props.clear();\r\n                            }}>Dijkstra</div></li>\r\n                    </ul>\r\n                </nav>\r\n                <div>\r\n                    <button onClick={() => { props.clear() }}\r\n                        disabled={props.animating === true}\r\n                        className=\"clearButton\"\r\n                    >Clear Path</button>\r\n                    <button onClick={() => { props.clearWalls() }}\r\n                        disabled={props.animating === true}\r\n                        className=\"clearButton\"\r\n                    >Clear Walls</button>\r\n                    <button\r\n                        disabled={algoName === \"none\" || props.animating === true}\r\n                        onClick={() => { props.exe(algoName) }}\r\n                        className=\"startButton\">\r\n                        {algoName === \"none\" ? \"Please select algorithon\" :\r\n                            props.animating ? \"Animating\" : `Go ${algoName}!`}\r\n                    </button>\r\n                </div>\r\n            </div>\r\n\r\n        </React.Fragment >\r\n\r\n    );\r\n}\r\n\r\nexport default NavBar;","import React, { Component } from \"react\";\r\nimport \"./Pathfinder.css\";\r\nimport GridMap from \"./GridMap/GridMap\";\r\nimport \"../algorithms/dijkstra\";\r\nimport { dijkstra, reconstructPathDijkstra } from \"../algorithms/dijkstra\";\r\nimport { astar, reconstructPathAstar } from \"../algorithms/astar\";\r\nimport NavBar from \"../NavBar/NavBar\";\r\n\r\nexport default class Pathfinder extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const h = this.props.windowSize.height;\r\n    const w = this.props.windowSize.width;\r\n    const nRows = Math.floor((h - 140) / 25);\r\n    const nCols = Math.floor((w - 200) / 25);\r\n    this.state = {\r\n      rows: nRows,\r\n      cols: nCols,\r\n      startNode: {\r\n        row: Math.floor(nRows / 2),\r\n        col: Math.floor(nCols / 4),\r\n      },\r\n      finishNode: {\r\n        row: Math.floor(nRows / 2),\r\n        col: Math.floor(nCols / 4) * 3,\r\n      },\r\n      grid: [],\r\n      mouseIsPressed: false,\r\n      animating: false\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n\r\n    const grid = getInitialGrid(this.state.rows, this.state.cols);\r\n    this.setState({ grid });\r\n  }\r\n\r\n  resetGird = () => {\r\n    for (let row = 0; row < this.state.rows; row++) {\r\n      for (let col = 0; col < this.state.cols; col++) {\r\n        if (row === this.state.startNode.row && col === this.state.startNode.col) {\r\n          document.getElementById(`node-${row}-${col}`).className =\r\n            \"node node-start\";\r\n        } else if (row === this.state.finishNode.row && col === this.state.finishNode.col) {\r\n          document.getElementById(`node-${row}-${col}`).className =\r\n            \"node node-finish\";\r\n        } else {\r\n          document.getElementById(`node-${row}-${col}`).className = \"node\";\r\n        }\r\n      }\r\n    }\r\n    const grid = getInitialGrid(this.state.rows, this.state.cols);\r\n    this.setState({ grid });\r\n  };\r\n\r\n  resetGirdButWall = (ifClearWall) => {\r\n    const grid = this.state.grid;\r\n    for (let nodesRow of grid) {\r\n      for (let node of nodesRow) {\r\n        if (node.type === \"node-visited\" || node.type === \"node-shortest-path\") {\r\n          node.type = \"\";\r\n        }\r\n        if (node.row === this.state.startNode.row && node.col === this.state.startNode.col) {\r\n          node.type = \"node-start\";\r\n        } else if (node.row === this.state.finishNode.row && node.col === this.state.finishNode.col) {\r\n          node.type = \"node-finish\";\r\n        } else if (node.type === \"node-wall\" && ifClearWall) {\r\n          node.type = \"\";\r\n        }\r\n      }\r\n    }\r\n    this.setState({ grid });\r\n  };\r\n\r\n  //Mouse Event Handlers\r\n  //Map\r\n  handleMapMouseDown = () => {\r\n    this.setState({\r\n      mouseIsPressed: true\r\n    });\r\n  }\r\n\r\n  handleMapMouseUp = () => {\r\n    this.setState({\r\n      mouseIsPressed: false\r\n    });\r\n  }\r\n\r\n  //Node\r\n  handleNodeMouseDown = (row, col) => {\r\n    setWall(this.state.grid, row, col);\r\n  };\r\n  handleNodeMouseEnter = (row, col) => {\r\n    if (!this.state.mouseIsPressed) return;\r\n    setWall(this.state.grid, row, col);\r\n    this.forceUpdate();\r\n  };\r\n  handleNodeMouseLeave = (row, col) => {\r\n    if (!this.state.mouseIsPressed) return;\r\n    UntoggledNode(this.state.grid, row, col);\r\n    this.forceUpdate();\r\n  };\r\n  handleNodeMouseUp = (row, col) => {\r\n    UntoggledNode(this.state.grid, row, col);\r\n  };\r\n\r\n\r\n  //Animation\r\n  animateAlgo(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestPathOrder);\r\n        }, 10 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        node.type = \"node-visited\";\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node node-visited\";\r\n      }, 10 * i);\r\n    }\r\n  }\r\n  animateShortestPath(nodesInShortestPathOrder) {\r\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n      setTimeout(() => {\r\n        const node = nodesInShortestPathOrder[i];\r\n        node.type = \"node-shortest-path\";\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node node-shortest-path\";\r\n      }, 10 * i);\r\n    }\r\n    setTimeout(() => {\r\n      this.setState({ animating: false });\r\n    }, 10 * nodesInShortestPathOrder.length);\r\n  }\r\n\r\n  visualize = (algo) => {\r\n    this.resetGirdButWall();\r\n    this.setState({ animating: true });\r\n    const startNode = this.state.grid[this.state.startNode.row][this.state.startNode.col];\r\n    const finishNode = this.state.grid[this.state.finishNode.row][this.state.finishNode.col];\r\n    let visitedNodesInOrder;\r\n    let nodesInShortestPathOrder;\r\n    if (algo === \"dijkstra\") {\r\n      visitedNodesInOrder = dijkstra(this.state.grid, startNode, finishNode);\r\n      nodesInShortestPathOrder = reconstructPathDijkstra(finishNode);\r\n    }\r\n    if (algo === \"astar\") {\r\n      visitedNodesInOrder = astar(this.state.grid, startNode, finishNode);\r\n      nodesInShortestPathOrder = reconstructPathAstar(finishNode);\r\n    }\r\n\r\n\r\n    this.animateAlgo(visitedNodesInOrder, nodesInShortestPathOrder);\r\n  };\r\n\r\n  render() {\r\n    const { grid, mouseIsPressed } = this.state;\r\n\r\n    return (\r\n      <main>\r\n        <NavBar\r\n          exe={this.visualize}\r\n          clear={this.resetGirdButWall}\r\n          clearWalls={this.resetGird}\r\n          animating={this.state.animating}\r\n        />\r\n\r\n        <GridMap\r\n          grid={grid}\r\n          mouseIsPressed={mouseIsPressed}\r\n          mapMouseDown={this.handleMapMouseDown}\r\n          mapMouseUp={this.handleMapMouseUp}\r\n          nodeMouseDown={this.handleNodeMouseDown}\r\n          nodeMouseEnter={this.handleNodeMouseEnter}\r\n          nodeMouseUp={this.handleNodeMouseUp}\r\n          nodeMouseLeave={this.handleNodeMouseLeave}\r\n        />\r\n        <p>*Click on the map to add walls.*</p>\r\n      </main>\r\n    );\r\n  }\r\n}\r\n\r\n//Helpers\r\nconst getInitialGrid = (nRow, nCol) => {\r\n  const grid = [];\r\n  for (let row = 0; row < nRow; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < nCol; col++) {\r\n      currentRow.push(createNode(col, row, nRow, nCol));\r\n    }\r\n    grid.push(currentRow);\r\n  }\r\n  return grid;\r\n};\r\n\r\nconst createNode = (col, row, nRow, nCol) => {\r\n  const nodeType = (row === Math.floor(nRow / 2) && col === Math.floor(nCol / 4)) ? \"node-start\" :\r\n    (row === Math.floor(nRow / 2) && col === Math.floor(nCol / 4) * 3) ? \"node-finish\" : \"\";\r\n  return {\r\n    col,\r\n    row,\r\n    type: nodeType,\r\n    toggled: false,\r\n    isWall: false,\r\n    previousNode: null\r\n  };\r\n};\r\n\r\n// const getNewGridWithWallToggled = (grid, row, col) => {\r\n//   const newGrid = grid.slice();\r\n//   const node = newGrid[row][col];\r\n//   if (node.toggled) return newGrid;\r\n//   const newNode = {\r\n//     ...node,\r\n//     type: node.type === \"node-wall\" ? \"\" :\r\n//       !(node.type === \"node-start\" || node.type === \"node-finish\") ? \"node-wall\" :\r\n//         node.type,\r\n//     toggled: true\r\n//   };\r\n//   newGrid[row][col] = newNode;\r\n//   return newGrid;\r\n// };\r\n\r\nconst setWall = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  if (node.toggled) return;\r\n  const nodeType = node.type + \"\";\r\n  if (nodeType === \"node-wall\") {\r\n    node.type = \"\";\r\n  } else if (!(node.type === \"node-start\" || node.type === \"node-finish\")) {\r\n    node.type = \"node-wall\";\r\n    node.key++;\r\n    node.toggled = true;\r\n  };\r\n}\r\n\r\nconst UntoggledNode = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  node.toggled = false;\r\n};","import React, { useState, useEffect, useCallback } from \"react\";\r\nimport \"./App.css\";\r\nimport Pathfinder from \"./Pathfinder/Pathfinder\";\r\nfunction App() {\r\n  const size = useWindowSize();\r\n  return (\r\n    <div className=\"App\">\r\n      <Pathfinder windowSize={size} />\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nfunction useWindowSize() {\r\n  const isClient = typeof window === 'object';\r\n\r\n  const getSize = useCallback(\r\n    () => {\r\n      return {\r\n        width: isClient ? window.innerWidth : undefined,\r\n        height: isClient ? window.innerHeight : undefined\r\n      };\r\n    },\r\n    [isClient],\r\n  );\r\n\r\n\r\n\r\n  const [windowSize, setWindowSize] = useState(getSize);\r\n\r\n  useEffect(() => {\r\n    if (!isClient) {\r\n      return false;\r\n    }\r\n\r\n    function handleResize() {\r\n      setWindowSize(getSize());\r\n    }\r\n\r\n    window.addEventListener('resize', handleResize);\r\n    return () => window.removeEventListener('resize', handleResize);\r\n  }, [getSize, isClient]); // Empty array ensures that effect is only run on mount and unmount\r\n\r\n  return windowSize;\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}